{"version":3,"sources":["components/ImageSearchForm/ImageSearchForm.js","components/FaceDetect/FaceDetect.js","App.js","serviceWorker.js","index.js"],"names":["ImageSearchForm","onInputChange","onSubmit","className","type","onChange","placeholder","onClick","FaceDetect","imageUrl","box","id","alt","src","width","heigh","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","app","Clarifai","App","apiKey","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","height","left_col","top_row","right_col","bottom_row","displayFaceBox","setState","event","input","target","value","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","console","log","this","bg","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.21309eee.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ImageSearchForm.css\";\r\n\r\nconst ImageSearchForm = ({ onInputChange, onSubmit }) => {\r\n  return (\r\n    <div className=\"ma5 mto\">\r\n      <div className=\"center\">\r\n        <div className=\"form center pa4 br3 shadow-5\">\r\n          <input\r\n            className=\"f4 pa2 w-70 center\"\r\n            type=\"text\"\r\n            onChange={onInputChange}\r\n            placeholder = 'Put your  Image URL here'\r\n          />\r\n          <button\r\n            className=\"w-30 grow f4 link ph3 pv2 dib white bg-blue\"\r\n            onClick={onSubmit}\r\n          >\r\n            Detect\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageSearchForm;\r\n","import React from \"react\";\r\nimport \"./FaceDetect.css\";\r\n\r\nconst FaceDetect = ({ imageUrl, box }) => {\r\n  return (\r\n    <div className=\"center ma\">\r\n      <div className=\"absolute mt2\">\r\n        <img id=\"inputimage\" alt=\"\" src={imageUrl} width=\"500px\" heigh=\"auto\" />\r\n        <div\r\n          className=\"bounding-box\"\r\n          style={{\r\n            top: box.topRow,\r\n            right: box.rightCol,\r\n            bottom: box.bottomRow,\r\n            left: box.leftCol,\r\n          }}\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FaceDetect;\r\n","import React, { Component } from \"react\";\r\nimport Clarifai from \"clarifai\";\r\nimport ParticlesBg from 'particles-bg';\r\nimport ImageSearchForm from \"./components/ImageSearchForm/ImageSearchForm\";\r\nimport FaceDetect from \"./components/FaceDetect/FaceDetect\";\r\nimport \"./App.css\";\r\n\r\n\r\n// You need to add your own API key here from Clarifai.\r\nconst app = new Clarifai.App({\r\n  apiKey: \"65da8f8c96b844f2ac8abc47c787580e\",\r\n});\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      input: \"\",\r\n      imageUrl: \"\",\r\n      box: {},\r\n    };\r\n  }\r\n\r\n  calculateFaceLocation = (data) => {\r\n    const clarifaiFace =\r\n      data.outputs[0].data.regions[0].region_info.bounding_box;\r\n    const image = document.getElementById(\"inputimage\");\r\n    const width = Number(image.width);\r\n    const height = Number(image.height);\r\n    return {\r\n      leftCol: clarifaiFace.left_col * width,\r\n      topRow: clarifaiFace.top_row * height,\r\n      rightCol: width - clarifaiFace.right_col * width,\r\n      bottomRow: height - clarifaiFace.bottom_row * height,\r\n    };\r\n  };\r\n\r\n  displayFaceBox = (box) => {\r\n    this.setState({ box: box });\r\n  };\r\n\r\n  onInputChange = (event) => {\r\n    this.setState({ input: event.target.value });\r\n  };\r\n\r\n  onSubmit = () => {\r\n    this.setState({ imageUrl: this.state.input });\r\n    app.models\r\n      .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\r\n      .then((response) =>\r\n        this.displayFaceBox(this.calculateFaceLocation(response))\r\n      )\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1> copy the image Url and paste it in the search and it will detect Faces</h1>\r\n        <ImageSearchForm\r\n          onInputChange={this.onInputChange}\r\n          onSubmit={this.onSubmit}\r\n        />\r\n        <FaceDetect box={this.state.box} imageUrl={this.state.imageUrl} />\r\n\r\n        <ParticlesBg type=\"random\" bg={true}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"tachyons\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}